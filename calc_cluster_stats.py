# program tica_interface.py

import sys, math, os
import matplotlib.pyplot as plt
import numpy as np
import pyemma
from pyemma.util.contexts import settings
import argparse
import time
import copy

if __name__ == '__main__':

    # read commandline variables
    parser = argparse.ArgumentParser()
    parser.add_argument('--i', dest = 'in_file', required = True, help = 'input file of original feature data')
    parser.add_argument('--dtraj', dest = 'dtraj_file', required = True, help = 'dtraj file generated by kmeans clustering')
    parser.add_argument('--o', dest = 'out_name', default = 'its_result', help = 'root name for output files')
    parser.add_argument('--multiple', dest = 'is_multiple', help = 'Is your input file (and subsequently dtraj file) a list of multiple trajcetory?', action = 'store_true')
    parser.add_argument('--skip_output', dest = 'skip_output', help = 'whether you want to skip the output of original embedded data', action = 'store_true')
    parser.add_argument('--v', dest = 'verbose', help = 'verbosity', action = 'store_true')

    args = parser.parse_args()

    fn_in       = args.in_file
    fn_dtraj    = args.dtraj_file
    fn_out      = args.out_name
    is_multiple = args.is_multiple
    skip_output = args.skip_output
    verbose     = args.verbose

    # log output
    print('general options')
    print('    input file: {}'.format(fn_in))
    print('    dtraj file: {}'.format(fn_dtraj))
    print('    output prefix: {}'.format(fn_out))
    if (skip_output):
        print('    skip output section?: yes')
    else:
        print('    skip output section?: no')

    start = time.time()

    infiles = []
    if (is_multiple):
        with open(fn_in) as input:
            lines = input.readlines()
            for line in lines:
                infiles.append(line.replace('\n', ''))  # stripping line ending
    else:
        infiles.append(fn_in)

    nfile = len(infiles)

    if (verbose):
        print('')
        print('number of input files: {}'.format(nfile))

    data = []

    for infile in infiles:

        temparray = np.loadtxt(infile, dtype='float')
        temparray2 = np.delete(temparray, [0], axis=1)
        data.append(temparray2.squeeze())

    print('type of data: ', type(data))
    print('dimensions: ', len(data))
    print('type of data[0]', type(data[0]))
    print('shape of elements: ', data[0].shape)

    if (verbose):
        print('')
        print('shape of each input data:')
        for i in range(len(data)):
            print('    ', i, ' ', data[i].shape)

    dtrajfiles = []
    if (is_multiple):
        with open(fn_dtraj) as input:
            lines = input.readlines()
            for line in lines:
                dtrajfiles.append(line.replace('\n', ''))  # stripping line ending
    else:
        dtrajfiles.append(fn_dtraj)

    nfile_dtraj = len(dtrajfiles)

    if (nfile != nfile_dtraj):
        print('Error: mismatch of nfile between input feature files and dtraj files')
        sys.exit()

    dtraj = []

    for dtrajfile in dtrajfiles:

        temparray = np.loadtxt(dtrajfile, dtype='int')
        temparray2 = np.delete(temparray, [0], axis=1)
        dtraj.append(temparray2.squeeze())

    nclass = 0
    for i in range(len(data)):
            if (nclass < dtraj[i].max()):
                nclass = dtraj[i].max()

            if(data[i].shape[0] != dtraj[i].shape[0]):
                print('Error: mismatch of ndata between input feature files and dtraj files')
                sys.exit()

    nclass += 1   # cluster index in dtraj are 0 ~ n - 1
    nfeature = data[0].shape[1]
    fmean = np.empty((0, nfeature))
    fstdev = np.empty((0, nfeature))

    for k in range(nclass):
        temp = np.empty((0, data[0].shape[1]))
        for i in range(len(dtraj)):
            for j in range(dtraj[i].shape[0]):
                if (dtraj[i][j] == k):
                    temp = np.append(temp, data[i][j,:].reshape([1,nfeature]), axis=0)

        if (verbose):
            print('number of members in cluster ', k, ': ', temp.shape[0])
        if (temp.shape[0] != 0):
            temp_mean = np.mean(temp, axis=0)
            temp_stdev = np.std(temp, axis=0)
            fmean = np.append(fmean, temp_mean.reshape([1,nfeature]), axis=0)
            fstdev = np.append(fstdev, temp_stdev.reshape([1,nfeature]), axis=0)
        else:
            temp_mean = np.zeros((1,nfeature))
            temp_stdev = np.zeros((1,nfeature))
            fmean = np.append(fmean, temp_mean, axis=0)
            fstdev = np.append(fstdev, temp_stdev, axis=0)

    if (not skip_output):

        fn_mean = fn_out + '_feature_mean.dat'
        fn_stdev = fn_out + '_feature_stdev.dat'

        f = open(fn_mean, "w")
        for i in range(nclass):
            line = format(i, '>9')
            for j in range(nfeature):
                line += format(fmean[i,j], '>11.5f')

            f.write(line)
            f.write("\n")
        f.close()

        f = open(fn_stdev, "w")
        for i in range(nclass):
            line = format(i, '>9')
            for j in range(nfeature):
                line += format(fstdev[i,j], '>11.5f')

            f.write(line)
            f.write("\n")
        f.close()


    interval = time.time() - start
    print('processing time : {}s'.format(interval))

    sys.exit()
